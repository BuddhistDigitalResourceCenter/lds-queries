#QueryScope=General
#QueryReturnType=Graph
#QueryResults=A graph for the given resource.
#QueryParams=R_RES
#QueryUrl=/ResInfo-SameAs?R_RES=bdr:P360

#param.R_RES.type=resource
#param.R_RES.subtype=a Resource ID
#param.R_RES.desc=the unique resource ID of the chosen resource

construct {
 ?r ?rp ?ro .
 ?ro2 ?ro2p ?ro2o .
 ?ro3 ?ro3p ?ro3o .
 ?ro3o ?ro4p ?ro4o .
 ?ro5o ?ro6p ?ro6o .

 ?q ?qp ?qo .
 ?r tmp:hasAdminData ?q .

 ?r owl:sameAs ?sameA .
 ?r owl:sameAs ?sameB .

 ?r tmp:siblingInstances ?sibling .

 ?ro tmp:withSameAs ?roSame .
 ?ro tmp:withSameAs ?roSame2 .
 
 # misc props needed to fix display:

 ?ro skos:prefLabel ?roLabel .

 ?ro bdo:inRootInstance ?roRoot .
 ?roRoot skos:prefLabel ?roRootLabel .

 ?sibling skos:prefLabel ?siblingLabel .
 ?sibling bdo:inRootInstance ?siblingRoot .
 ?siblingRoot skos:prefLabel ?siblingRootLabel .

 ?ro bdo:language ?roLang .

 ?roTCL ?roTCLp ?roTCLo .
 ?roTCLo skos:prefLabel ?roTCLoLabel .

 ?roEv skos:prefLabel ?roEvLab . 

 ?ro6o skos:prefLabel ?ro6oLabel . 

 ?qo skos:prefLabel ?qoLab .

 ?ro adm:canonicalHtml ?roCanonHtml .

 ?roP :partIndex ?roPi .
 ?roV :volumeNumber ?roVi .

 ?id ?idp ?ido .

 ?resAbout bdo:isAbout ?R_RES ;
           skos:prefLabel ?resAboutLabel ;
           tmp:entityScore ?resAbouteScore ;
           tmp:provider ?resAboutProvider .

} where {
  { ?r owl:sameAs* ?R_RES . }
  union
  { ?R_RES owl:sameAs* ?r . }

  optional { ?r owl:sameAs+ ?sameA . } 
  optional { ?sameB owl:sameAs+ ?r . }

  {
    ?r ?rp ?ro .
    optional {
      ?ro owl:sameAs+ ?roSame .
    }
    optional {
      ?roSame2 owl:sameAs+ ?ro .
    }
    optional {
      # add prefLabel for any related resource
      ?r ?rp ?ro .
      ?ro skos:prefLabel ?roLabel .
    }
    optional {
      # display inRootInstance (used to sort instances)
      ?r ?rp ?ro .
      ?ro bdo:inRootInstance ?roRoot .
    }
    optional {
      # display inRootInstance's prefLabel
      ?r ?rp ?ro .
      ?ro bdo:inRootInstance ?roRoot .
      ?roRoot skos:prefLabel ?roRootLabel .
    }
    optional {
      # add language (used to sort translations)
      ?r :workHasTranslation ?ro .
      ?ro bdo:language ?roLang .
    }
    optional {
      # add prefLabel for Event subproperties or LineageHolder
      ?r ?rp ?ro .
      { ?ro rdf:type/rdfs:subClassOf+ :Event } union { ?ro rdf:type/rdfs:subClassOf* :LineageHolder }
      ?ro ?rpEv ?roEv .
      ?roEv skos:prefLabel ?roEvLab .
    }
    optional {
      # get canonicalHtml for related resources
      ?r ?rp ?ro .
      ?ro adm:canonicalHtml ?roCanonHtml .
    }
  } union {
    ?r ?rp2 ?ro2 .
    ?ro2 rdf:type/rdfs:subClassOf+ :Facet .
    ?ro2 ?ro2p ?ro2o .
  } union {
    ?r ?rp3 ?ro3 .
    ?ro3 rdf:type/rdfs:subClassOf+ :Event .
    ?ro3 ?ro3p ?ro3o .
    optional {
      ?ro3o rdf:type/rdfs:subClassOf+ :Facet .
      ?ro3o ?ro4p ?ro4o .
    } 
    optional {
      ?ro3o a bdo:DateIndication .
      ?ro3o ?ro4p ?ro4o .
    }
  } union {
    # return sub-events related to lineages
    ?r rdf:type/rdfs:subClassOf* :Lineage .
    ?r ?rp5 ?ro5 .
    ?ro5 ?ro5p ?ro5o .
    ?ro5o rdf:type/rdfs:subClassOf+ :Event .
    ?ro5o ?ro6p ?ro6o .
  } union {
    # return prefLabels for sub-events related to lineages
    ?r rdf:type/rdfs:subClassOf* :Lineage .
    ?r ?rp5 ?ro5 .
    ?ro5 ?ro5p ?ro5o .
    ?ro5o rdf:type/rdfs:subClassOf+ :Event .
    ?ro5o ?ro6p ?ro6o .
    ?ro6o skos:prefLabel ?ro6oLabel . 
  } union {
    ?q adm:adminAbout ?r .
    ?q ?qp ?qo .
    # we don't return all the adminAbout, they can be in large quantities
    FILTER(?qp != adm:adminAbout)
  } union {
    # return legalData labels
    ?q adm:adminAbout ?r .
    ?q adm:metadataLegal ?qo .
    ?qo skos:prefLabel ?qoLab .
  } union {
    ?parent bdo:workHasInstance ?r ; bdo:workHasInstance ?sibling .
    filter( str(?r) != str(?sibling) ) .
    optional {
      # display siblings' prefLabel
      ?parent bdo:workHasInstance ?r ; bdo:workHasInstance ?sibling .
      filter( str(?r) != str(?sibling) ) .
      ?sibling skos:prefLabel ?siblingLabel .
    }
    optional {
      # display siblings' inRootInstance
      ?parent bdo:workHasInstance ?r ; bdo:workHasInstance ?sibling .
      filter( str(?r) != str(?sibling) ) .
      ?sibling bdo:inRootInstance ?siblingRoot .
    }
    optional {
      # display siblings' inRootInstance's prefLabel
      ?parent bdo:workHasInstance ?r ; bdo:workHasInstance ?sibling .
      filter( str(?r) != str(?sibling) ) .
      ?sibling bdo:inRootInstance ?siblingRoot .
      ?siblingRoot skos:prefLabel ?siblingRootLabel .
    }
  } union {
    # add Title/ContentLocation nodes that were missing
    # + display prefLabel for AgentAsCreator 
    # + add Note subnodes
    ?r ?rpTCL ?roTCL .
    { ?roTCL a :Title . } union { ?roTCL a :ContentLocation } union { ?roTCL a :AgentAsCreator } union { ?roTCL a :Note } 
    ?roTCL ?roTCLp ?roTCLo .
    optional {
     ?r ?rpTCL ?roTCL .
     ?roTCL ?roTCLp ?roTCLo .
     ?roTCLo skos:prefLabel ?roTCLoLabel .
    }
  } union {
    # add parts indexes
    ?r :hasPart ?roP .
    ?roP :partIndex ?roPi .
  } union {
    # add volume numbers
    ?r :instanceHasVolume ?roV .
    ?roV :volumeNumber ?roVi .
  } union {
    ?r owl:sameAs* ?R_RES ;
       bf:identifiedBy ?id .
    ?id ?idp ?ido .
  } union {
    # 10 works about the entity
    select 
       ?resAbout ?resAbouteScore ?resAboutType ?resAboutProvider
    where {
           ?r owl:sameAs* ?R_RES .
           ?resAbout bdo:workIsAbout ?r ;
                     tmp:entityScore ?resAbouteScore ;
                     skos:prefLabel ?resAboutLabel ;
                     .
           ?resAdm adm:adminAbout ?resAbout ;
                   adm:status bda:StatusReleased ;
                   adm:metadataLegal/adm:provider ?resAboutProvider .
    } order by desc(?resAbouteScore) limit 10
  }
}

# TODO:
#   - add works from which the person is the author
#   - filter siblings so that:
#      * on a reproduction, only other reproductions of the same instance are returned
#      * on a non-reproduction, only other non-reproduction instances are returned