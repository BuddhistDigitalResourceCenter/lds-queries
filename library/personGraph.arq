#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All persons whose various names contain the given L_NAME parameter value.
#QueryParams=L_NAME,LG_NAME
#QueryUrl=/lib/personGraph?L_NAME="'od zer"&LG_NAME=bo-x-ewts

#param.L_NAME.type=string
#param.L_NAME.langTag=LG_NAME
#param.L_NAME.isLucene=true
#param.L_NAME.example="ye shes"

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>

CONSTRUCT
{
    ?res tmp:status ?st .
    ?res tmp:matchScore ?sc .
    ?res tmp:nameMatch ?nameMatch.
    ?res tmp:isMain true .
    ?res tmp:isCreator ?isCreator .
    ?res ?resp ?reso .
    ?res tmp:yearStart ?yearStart .
    ?res tmp:provider ?provider .
    ?res tmp:originalRecord ?originalRecord .

    ?evt ?evtp ?evto .
    ?name ?namep ?nameo .

}
WHERE 
{
  {
    
    (?name ?sc ?nameMatch) text:query ( rdfs:label ?L_NAME "highlight:" ) .
    
    ?res bdo:personName ?name .
    VALUES ?resp {skos:altLabel skos:prefLabel skos:placeEvent bdo:personGender bdo:personName bdo:personEvent owl:sameAs tmp:entityScore}
    ?res ?resp ?reso .
    ?resAdm adm:adminAbout ?res .
    ?resAdm adm:status ?st .
    ?resAdm adm:metadataLegal/adm:provider ?provider .
    ?name ?namep ?nameo .
    bind ( exists {?tmp bdo:agent ?res} as ?isCreator )
    
  } union {

    (?name) text:query ( rdfs:label ?L_NAME ) .
    
    ?res bdo:personName ?name .
    ?res bdo:personEvent ?evt .
    ?evt a ?evtType .
    FILTER (?evtType IN(bdo:PersonBirth , bdo:PersonDeath))
    ?evt ?evtp ?evto .
    BIND (IF(?evtType = bdo:PersonBirth && (?evtp = bdo:onYear || ?evtp = bdo:notBefore), ?evto, 1/0) as ?yearStart)

  }
}
