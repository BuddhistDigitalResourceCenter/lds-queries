#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All resources associated with the given Work.
#QueryParams=R_RES
#QueryUrl=/lib/workAllAssociations?R_RES=W19740

#param.R_RES.type=resource
#param.R_RES.subtype=a Resource ID
#param.R_RES.desc=the unique resource ID of the referenced work

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>

construct {
  #associated Works
  ?work a :Work .
  ?work skos:prefLabel ?worklabel .
  ?work bdo:workIsAbout ?workAbout .
  ?work adm:license ?worklicense.
  ?work adm:status ?workstatus .
  ?work adm:access ?workaccess .
  ?work bdo:workLangScript ?workscript.
  ?work bdo:workType ?worktype .
  ?work bdo:workGenre ?workgenre .

  ?work adm:license ?rootWorkLicence.
  ?work adm:status ?rootWorkStatus .
  ?work adm:access ?rootWorkAccess .
  ?work bdo:workLangScript ?rootWorkScript.
  ?work bdo:workHasRoot ?rootWork .
  ?work tmp:relationType ?relationType .
  ?work tmp:rootPrefLabel ?rootWorkPrefLabel .

  #associated Lineages
  ?lineage a :Lineage .
  ?lineage skos:prefLabel ?lineagePrefLabel . 
  ?lineage tmp:relationType bdo:lineageObject .
}
where {
    #associated Works
  {
      ?work :workIsAbout ?R_RES .
      BIND(:workIsAbout as ?relationType)
      # we don't want expressions, just the most abstract
      OPTIONAL{
        ?work bdo:workExpressionOf ?workExpressed .
      }
      FILTER (!bound(?workExpressed))
      ?work skos:prefLabel ?worklabel .
      optional {?work bdo:workIsAbout ?workAbout .
      ?workAbout a bdo:Topic .}
      optional {?work adm:license ?worklicense .}
      optional {?work adm:status ?workstatus .}
      optional {?work adm:access ?workaccess .}
      optional {?work bdo:workLangScript ?workscript .}
      optional {?work bdo:workType ?worktype .}
      optional {?work bdo:workGenre ?workgenre .}
      # we could fetch dates, but our data is almost only publishing date, which is not that interesting
      #optional {
      #  ?work bdo:workEvent ?we .
      #  ?we a ?wet .
      #  FILTER (?wet = bdo:CompletedEvent || ?wet = bdo:TranslatedEvent || ?rwet = bdo:PublishedEvent)
      #  optional { ?we :notAfter ?wena . }
      #  optional { ?we :notBefore ?wenb . }
      #  optional { ?we :onYear ?wenoy . }
      #}

      optional {
        ?work bdo:workPartOf+ ?rootWork .
        optional { ?rootWork bdo:workPartOf ?parentWork }
        FILTER (!bound(?parentWork))
        ?rootWork skos:prefLabel ?rootWorkPrefLabel .
        optional {?rootWork adm:license ?rootWorkLicence .}
        optional {?rootWork adm:status ?rootWorkStatus .}
        optional {?rootWork adm:access ?rootWorkAccess .}
        optional {?rootWork bdo:workLangScript ?rootWorkScript .}
      }
  }
  #associated Lineages
  union
  {
    ?lineage bdo:lineageObject ?R_RES .
    ?lineage skos:prefLabel ?lineagePrefLabel
  }
}
