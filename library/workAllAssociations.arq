#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All resources associated with the given Work.
#QueryParams=R_RES
#QueryUrl=/lib/workAllAssociations?R_RES=W19740

#param.R_RES.type=resource
#param.R_RES.subtype=a Resource ID
#param.R_RES.desc=the unique resource ID of the referenced work

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>

construct {
  #associated Works
  ?work a ?type .
  ?work skos:prefLabel ?worklabel .
  ?work bdo:workLangScript ?workscript.
  ?work bdo:workType ?type .
  ?work bdo:workGenre ?wG .
  ?work bdo:workIsAbout ?wAB .
  ?work bdo:workGenre ?rootWg .
  ?work bdo:workIsAbout ?rootWab .
  ?work bdo:workObjectType ?wOT .
  ?work bdo:workPartType ?wPT .

  ?work bdo:workLangScript ?lssub.  

  ?work adm:license ?rootWorkLicence.
  ?work adm:status ?rootWorkStatus .
  ?work adm:access ?rootWorkAccess .
  ?work bdo:workLangScript ?rootWorkScript.
  ?work bdo:workHasRoot ?rw .
  ?work tmp:relationType ?relationType .
  ?work tmp:rootPrefLabel ?rootWorkPrefLabel .

  #associated Lineages
  ?lineage a :Lineage .
  ?lineage skos:prefLabel ?lineagePrefLabel . 
  ?lineage tmp:relationType bdo:lineageObject .

  #associated people    
  ?crea a :Person .
  ?crea skos:prefLabel ?creaLabel .
  ?crea tmp:relationType ?roleLabel .

  #sameAs resources
  ?same a ?sameT .
  ?same skos:prefLabel ?sameL .
  ?same tmp:relationType owl:sameAs .
  ?same adm:canonicalHtml ?sameCanonHTML .
  ?sameBDRC a ?sameT .
  ?sameBDRC skos:prefLabel ?sameBDRClabel .
  ?sameBDRC tmp:relationType owl:sameAs .

  ?sameBDRC owl:sameAs ?same .
  ?same owl:sameAs ?sameBDRC .
  ?same owl:sameAs ?R_RES .
  ?sameBDRC owl:sameAs ?R_RES .
}
where {
    #associated Works
  {
      ?work :workIsAbout ?R_RES .
      BIND(:workIsAbout as ?relationType)
      # we don't want expressions, just the most abstract
      OPTIONAL{
        ?work bdo:workExpressionOf ?workExpressed .
      }
      FILTER (!bound(?workExpressed))
      ?work skos:prefLabel ?worklabel .
      ?work a ?type .
      ?work bdo:workPartOf* ?rw .
      ?rw :isRoot true .
      ?rw skos:prefLabel ?rootWorkPrefLabel .
      ?resAdm adm:adminAbout ?rw ;
              adm:status ?rootWorkStatus .

      optional {?work bdo:workLangScript ?workscript .      
        optional {
          ?workscript rdfs:subClassOf+ ?lssub .
          ?lssub bdo:language ?lssublang .
          filter(bound(?lssublang))
        }
      }
      optional {?work bdo:workPartType ?wPT . } .
      optional {?work bdo:workObjectType ?wOT . } .

      optional {?work bdo:workIsAbout ?wAB . ?wAB a :Topic . optional {?wAB ^:taxHasSubClass+ ?rootWab . } }
      optional {?work bdo:workGenre ?wG . optional {?wG ^:taxHasSubClass+ ?rootWg . } }

      optional {
        ?rw :workHasItem ?item .
        ?item a :ItemImageAsset .
        ?itemAdm adm:adminAbout ?item .
        ?itemAdm adm:access ?rootWorkAccess .
        ?itemAdm adm:contentLegal/adm:license ?rootWorkLicence .
      }
      optional { ?rw  bdo:workLangScript ?rootWorkScript .       
        optional {
          ?rootWorkScript rdfs:subClassOf+ ?lssub .
          ?lssub bdo:language ?lssublang .
          filter(bound(?lssublang))
        }
      } .  }
  #associated Lineages
  union
  {
    ?lineage bdo:lineageObject ?R_RES .
    ?lineage skos:prefLabel ?lineagePrefLabel
  }
  #associated people
  union
  {
    ?R_RES :creator ?agent .
    ?agent :agent ?crea ; :role ?creaRole .
    ?creaRole skos:prefLabel ?roleLabel . 
    ?crea skos:prefLabel ?creaLabel .   
  }
  # sameAs resources
  union
  {
    { 
      ?same owl:sameAs+ ?R_RES . 
      ?same a ?sameT .
      ?sameT rdfs:subClassOf+ bdo:Entity .      
    }
    union { 
      ?sameBDRC owl:sameAs+ ?R_RES ; owl:sameAs ?same . 
      ?sameBDRC a ?sameT .
      ?sameT rdfs:subClassOf+ bdo:Entity .      
      filter( ?same != ?R_RES && ?sameBDRC != ?R_RES ) .
      optional { ?sameBDRC skos:prefLabel ?sameBDRClabel } .
    }
    union {
      ?R_RES a ?sameT .
      ?sameT rdfs:subClassOf+ bdo:Entity .      
      ?R_RES ?sameAsProp ?same .
      ?sameAsProp rdfs:subPropertyOf* owl:sameAs.
    } 
    optional { ?same skos:prefLabel ?sameL } .
    optional { ?same foaf:name ?sameL } .    
    optional { ?same adm:canonicalHtml ?sameCanonHTML } .
  }
}
