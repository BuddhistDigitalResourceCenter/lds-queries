#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All works whose various literals contain the given L_NAME parameter value, along with their LICENSE + ACCESS + LANGSCRIPT + STATUS facets.
#QueryParams=L_NAME,LG_NAME
#QueryUrl=/lib/workFacetGraph?L_NAME="'od zer"&LG_NAME=bo-x-ewts

#param.L_NAME.type=string
#param.L_NAME.langTag=LG_NAME
#param.L_NAME.isLucene=true
#param.L_NAME.example="ye shes"

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>

CONSTRUCT
  {
    ?res adm:license ?license .
    ?res adm:status ?st .
    ?res a ?type .
    ?res adm:access ?access .
    ?res bdo:workIsAbout ?t .
    ?res bdo:workGenre ?g .
    ?res bdo:workIsAbout ?rootT .
    ?res bdo:workGenre ?rootG .
    ?res bdo:workLangScript ?ls .
    ?res bdo:workLangScript ?lssub .
    ?res skos:prefLabel ?l .
    ?res tmp:titleMatch ?lit .
    ?res tmp:matchScore ?sc .
    ?res tmp:labelMatch ?labelMatch.
    ?res bdo:workObjectType ?wOT .


    # redundant with rootSearch
    #?res bdo:workPartType ?wPT .
    #?res bdo:workHasPart ?wHP .    
    #?res bdo:workExpressionOf ?wE .
    #?res tmp:prefLabelExpressionOf ?litE .
    #?res bdo:workHasExpression ?wH .
    #?res tmp:prefLabelHasExpression ?litH .

    ?res bdo:workHasRoot ?rw .
    ?res tmp:rootPrefLabel ?rwO .

    ?res ?creaRole ?litA.
  }
WHERE 
  {
    {
      (?res ?sc ?lit) text:query ( skos:prefLabel ?L_NAME "highlight:" ) .
      ?res a ?wtype . 
      ?wtype rdfs:subClassOf* bdo:Work .
    }
    union 
    {
      (?title ?sc ?lit) text:query ( rdfs:label ?L_NAME "highlight:" ) .
      ?res :workTitle ?title .
    }
    union 
    {
      (?author ?sc ?litA) text:query ( rdfs:label ?L_NAME "highlight:" ) .
      {
        ?author ^:eventWho ?anypropobj .
        ?res ?anyprop ?anypropobj .
        ?anypropobj a ?creaRole .
      }
      union 
      {
        ?res :creator ?agent . 
        ?agent :agent/:personName ?author ; :role ?creaRole .
      }      
    }
    
    optional { ?res bdo:workGenre ?g . optional { ?g ^:taxHasSubClass+ ?rootG . } . }
    optional { ?res bdo:workIsAbout ?t . ?t a :Topic . optional { ?t ^:taxHasSubClass+ ?rootT . } . }

    # good idea (but needs to be tested in a real case)
    #optional { 
    #  FILTER(!EXISTS { 
    #    { ?res bdo:workGenre ?g } union { ?res bdo:workIsAbout ?t . }
    #  })
    #  ?rootRes (:workHasPart)+ ?res .
    #  optional { ?rootRes bdo:workGenre ?g . }
    #  optional { ?rootRes bdo:workIsAbout ?t . ?t a :Topic . }
    #}

    ?res a ?type .
    ?res skos:prefLabel ?l .
    optional {
      ?res skos:prefLabel ?labelMatch.
      Filter ( str(?labelMatch) = str(?lit) )
    }
    ?res bdo:workPartOf* ?rw .
    optional {
      ?rw :isRoot true .
      ?rw skos:prefLabel ?rwO .
    }
    ?resAdm adm:adminAbout ?rw ;
            adm:status ?st .
    optional {
        ?rw  bdo:workLangScript ?ls . 
        optional {
          ?ls rdfs:subClassOf+ ?lssub .
          ?lssub bdo:language ?lssublang .
          filter(bound(?lssublang))
        }
    } .
    optional { ?res bdo:workObjectType ?wOT . } .


    # redundant with rootSearch
    optional { ?res bdo:workHasPart ?wHP . } .
    optional { ?res bdo:workPartType ?wPT . } .
    #optional {
    #  ?res bdo:workHasExpression ?wH .
    #  ?wH skos:prefLabel ?litH .
    #} .

    optional {
      ?rw :workHasItem ?item .
      ?item a :ItemImageAsset .
      ?itemAdm adm:adminAbout ?item .
      ?itemAdm adm:access ?access .
      ?itemAdm adm:contentLegal/adm:license ?license .
    } .
  }
order by desc(?sc)
