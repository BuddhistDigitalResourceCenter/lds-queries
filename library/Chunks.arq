#QueryScope=Etexts
#QueryReturnType=Graph
#QueryResults=A graph containing the chunks within the given limits for the given Resource
#QueryParams=R_RES,I_START,I_END
#QueryUrl=/Chunks?R_RES=bdr:UT4CZ5369_I1KG9127_0000&I_START=2000&I_END=3000

#param.R_RES.type=resource
#param.R_RES.subtype=a Resource ID
#param.R_RES.desc=the unique resource ID of the Etext being searched

#param.I_START.type=int
#param.I_START.desc=the char index of the first chunk to be fetched

#param.I_END.type=int
#param.I_END.desc=the char index of the last chunk

construct {
  ?R_RES bdo:eTextHasChunk ?chunk .
  ?chunk ?chunkP ?chunkO .
  ?R_RES :eTextHasPage ?page .
  ?page ?pageP ?pageO .
  ?line ?lineP ?lineO .
  ?einstAdm adm:adminAbout ?einst .
  ?einstAdm adm:access ?access .
  ?einstAdm adm:restrictedInChina ?ric .
}
where {
  {
    ?R_RES bdo:eTextHasChunk ?chunk .
    ?chunk  :sliceStartChar ?chunkstart ;
            :sliceEndChar ?chunkend .
    FILTER (?chunkstart <= ?I_END && ?chunkend >= ?I_START)
    ?chunk ?chunkP ?chunkO .
    ?R_RES :eTextInInstance ?einst .
    ?einstAdm adm:adminAbout ?einst .
    ?einstAdm adm:access ?access .
    BIND(EXISTS{?einstAdm adm:restrictedInChina true} as ?ric)
  } union {
    ?R_RES :eTextHasPage ?page .
    ?page  :sliceStartChar ?chunkstart ;
           :sliceEndChar ?chunkend .
    FILTER (?chunkstart <= ?I_END && ?chunkend >= ?I_START)
    ?page ?pageP ?pageO .
  } union {
    ?R_RES :eTextHasPage/:pageHasLine ?line .
    ?line  :sliceStartChar ?chunkstart ;
           :sliceEndChar ?chunkend .
    FILTER (?chunkstart <= ?I_END && ?chunkend >= ?I_START)
    ?line ?lineP ?lineO .
  }
}

